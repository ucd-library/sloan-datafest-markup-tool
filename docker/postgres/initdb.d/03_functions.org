* Functions
#+PROPERTY: header-args:sql :engine postgresql :cmdline "service=datafest201912" :tangle yes

** Crowd source Functions

There are a number of functions that we need in order to run the crowd_source
tool.  These help get data from the system for metrics, and also help o

First, datafest.page is missing page_ark let's fix that


** Next Page

We want to preferentially choose certain pages over others.  This is so we focus
our crowd sourcing data on the pages that need the most TLC.  Here are some
constraints:

- Preferentially, choose pages with lots of automatic marks :: For prices, the
     more prices mean better probability, but we need to make sure that the
     pages exist in both the DAMS, and in the tesseract pages.

- Choose pages that haven't been visited much yet :: Actually for our example,
     we probably want to see more people visit the same page, so maybe we don't
     want to include this just yet.

- Choose pages that haven't been marked as complete ::  We don't have a complete
     page marker write now. Maybe we need to add a [] to the form, where users
     can say no prices here?

- Don't revist pages for a particular user.

#+BEGIN_SRC sql
create or replace view datafest.page_everyone as
with p(page_ark,reason) AS ( VALUES
('d7tg6n-004','champagne'),
('d74s4s-027','Loire Valley')
)
select page_ark,c.year,c.name,
format('https://digital.ucdavis.edu/ark:/87287/%s/media/images/%s.jpg',
       regexp_replace(p.page_ark,'-.*',''),p.page_ark) as jpg
from p
join catalogs c on (regexp_replace(p.page_ark,'-.*','')=c.ark);
#+END_SRC

#+RESULTS:
| CREATE VIEW |
|-------------|

#+BEGIN_SRC sql
create materialized view datafest.page_price_p as
with a as (
 select t.ark as page_ark
 from tesseract.pages t
 join datafest.page p on (t.ark=p.page_ark)
),
b as (
 select page_ark,count(*)
 from wine_search.prices
 join a using (page_ark)
 group by page_ark
),
c as (
 select sum(count)
 from b
),
d as (
 select
 page_ark,
 case when (b is null) then 1000.0/c.sum else b.count*1000.0/c.sum end as prob
 from a
 left join b using (page_ark),c
)
select
 page_ark,
 prob,
 sum(prob) OVER (order by page_ark RANGE UNBOUNDED PRECEDING) as cum
 from d;

grant select on datafest.page_price_p to public;
#+END_SRC

#+RESULTS:
| SELECT 0 |
|----------|
| GRANT    |


*** Page User Probability

~page_user_p~ is a set of probabilities on the individual pages based on the
user.  Currently, this is binary, a prob of 1 if the user hasn't previously
visited the page and a prob of 0 if they have.  Visits are based on adding marks
to the record.  This function is used to create a user specific probability for
the next_page function.  The ~anon~ user is just a placeholder if we plan on
adding anonymous additions at a later date.

#+BEGIN_SRC sql
CREATE or replace function
datafest.page_user_p (user_id varchar default 'anon')
RETURNS TABLE (
 page_ark varchar,
 prob float
)
LANGUAGE SQL AS $$
select
 p.page_ark,
 case when (m is null) then 1.0::float else 0.0::float end as prob
 from datafest.page p
 left join
 (
   select distinct page_id from datafest.mark where user_id=$1
 ) as m using (page_id)
$$;
#+END_SRC

#+RESULTS:
| CREATE FUNCTION |
|-----------------|


*** Next Page

The ~next_page~ function is used to calculate the next page to deliver a user.
This is based on the number of prices, ~page_price_p~ and the user visits,
~page_user_p(user_id)~.  Later, we need to add parameter to get the next and
previous page in the catalogs, so that users can browse through an entire catalog.


#+BEGIN_SRC sql
DROP function if exists datafest.next_page(varchar);
CREATE function datafest.next_page(user_id varchar DEFAULT 'anon')
RETURNS varchar
LANGUAGE SQL AS $$
with pr as (
 select
 page_ark,
 p.prob*u.prob as prob,
 sum(p.prob*u.prob) OVER (order by page_ark RANGE UNBOUNDED PRECEDING) as cum
 from datafest.page_price_p p
 join page_user_p('quinn') u using (page_ark)
 where u.prob>0 and p.prob>0
),
r as (
 select random()*max(cum) as ran from pr
)
select page_ark
from pr,r
where cum<r.ran
order by cum desc
limit 1
$$


#+END_SRC

#+RESULTS:
| DROP FUNCTION   |
|-----------------|
| CREATE FUNCTION |



** Mark text,

#+BEGIN_SRC sql
create or replace function implicator_text (m in datafest.mark, t out text)
LANGUAGE SQL IMMUTABLE AS $$
select string_agg(w.text,' ' order by w.word_id)
from rtesseract.word w where (m.page_ark=w.page_ark and st_intersects(m.implicator_bbox,w.bbox));
$$;

create or replace function region_text (m in datafest.mark, t out text)
LANGUAGE SQL IMMUTABLE AS $$
select string_agg(w.text,' ' order by w.word_id)
from rtesseract.word w where (m.page_ark=w.page_ark and st_intersects(m.region_bbox,w.bbox));
$$;

#+END_SRC

#+RESULTS:
| CREATE FUNCTION |
|-----------------|
| CREATE FUNCTION |
