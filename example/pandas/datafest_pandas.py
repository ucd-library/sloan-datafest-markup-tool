# -*- coding: utf-8 -*-
"""datafest_pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/qjhart/da760538340982bf234f2527b83fb2a5/intro_to_pandas.ipynb

# Datafest Pandas

[*pandas*](http://pandas.pydata.org/) is a column-oriented data analysis API. It's a great tool for handling and analyzing input data, and many ML frameworks support *pandas* data structures as inputs.
Although a comprehensive introduction to the *pandas* API would span many pages, the core concepts are fairly straightforward, and we'll present them below. For a more complete reference, the [*pandas* docs site](http://pandas.pydata.org/pandas-docs/stable/index.html) contains extensive documentation and many tutorials.

## Basic Concepts

The following line imports the *pandas* API and prints the API version:
"""

from __future__ import print_function

import psycopg2

import pandas as pd
pd.__version__

"""The primary data structures in *pandas* are implemented as two classes:

  * **`DataFrame`**, which you can imagine as a relational data table, with rows and named columns.
  * **`Series`**, which is a single column. A `DataFrame` contains one or more `Series` and a name for each `Series`.

One way to create a `Series` is to construct a `Series` object. For example:
"""

pd.Series(['Red', 'White', 'Rosé'])

"""`DataFrame` objects can be created by passing a `dict` mapping `string` column names to their respective `Series`. If the `Series` don't match in length, missing values are filled with special [NA/NaN](http://pandas.pydata.org/pandas-docs/stable/missing_data.html) values. Example:"""

color = pd.Series(['Red', 'White', 'Rosé'])
type = pd.Series(['Still', 'Sparkling', 'Fortified'])

pd.DataFrame({ 'color': color, 'wine_type': type })

"""But most of the time, you load an entire file into a `DataFrame`. The following example loads Datafest wine Marks. Run the following cell to create your connection"""

PGHOST="datafest201912.library.ucdavis.edu"
PGDATABASE="postgres"
PGPORT="49152"
PGUSER="anon"
PGPASSWORD="anon"

conn_string = ("host={} port={} dbname={} user={} password={}") \
  .format(PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD)

conn=psycopg2.connect(conn_string)

"""Next, make an SQL selection and save to a data frame:"""

# edit SQL string here
sql_command = "SELECT * FROM {}.{};".format("datafest", "mark")
marks = pd.read_sql(sql_command, conn)
marks.describe()

"""The example above used `DataFrame.describe` to show interesting statistics about a `DataFrame`. Another useful function is `DataFrame.head`, which displays the first few records of a `DataFrame`:"""

marks.head()

"""Another powerful feature of *pandas* is graphing. For example, `DataFrame.hist` lets you quickly study the distribution of values in a column:"""

marks.hist('implicator_top')